apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8srequiredannotations
spec:
  crd:
    spec:
      names:
        kind: K8sRequiredAnnotations
      validation:
        openAPIV3Schema:
          properties:
            annotations:
              items:
                properties:
                  allowedRegex:
                    type: string
                  key:
                    type: string
                type: object
              type: array
            message:
              type: string
  targets:
  - rego: "package k8srequiredannotations\n\nget_message(parameters, _default) = msg {\n\tnot parameters.message\n\tmsg := _default\n}\n\nget_message(parameters, _default) = msg {\n\tmsg := parameters.message\n}\n\nviolation[{\"msg\": msg, \"details\": {\"missing_annotations\": missing}}] {\n\tprovided := {annotation | input.review.object.metadata.annotations[annotation]}\n\trequired := {annotation | annotation := input.parameters.annotations[_].key}\n\tmissing := required - provided\n\tcount(missing) > 0\n\tdef_msg := sprintf(\"you must provide annotations: %v\", [missing])\n\tmsg := get_message(input.parameters, def_msg)\n}\n\nviolation[{\"msg\": msg}] {\n\tvalue := input.review.object.metadata.annotations[key]\n\texpected := input.parameters.annotations[_]\n\texpected.key == key\n\texpected.allowedRegex != \"\"\n\tnot re_match(expected.allowedRegex, value)\n\tdef_msg := sprintf(\"Annotation <%v: %v> does not satisfy allowed regex: %v\", [key, value, expected.allowedRegex])\n\tmsg := get_message(input.parameters, def_msg)\n}"
    target: admission.k8s.gatekeeper.sh
